{"ts":1357838320904,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1357838322782,"patch":[[{"diffs":[[1,"(function(window) {\r\n    var HAS_HASHCHANGE = (function() {\r\n    \tvar doc_mode = window.documentMode;\r\n\t\treturn ('onhashchange' in window) &&\r\n\t\t\t(doc_mode === undefined || doc_mode > 7);\r\n\t})();\r\n\t\r\n\tL.Hash = function(map) {\r\n\t\tthis.onHashChange = L.Util.bind(this.onHashChange, this);\r\n\t\r\n\t\tif (map) {\r\n\t\t\tthis.init(map);\r\n\t\t}\r\n\t};\r\n\t\r\n\tL.Hash.prototype = {\r\n\t\tmap: null,\r\n\t\tlastHash: null,\r\n\t\r\n\t\tparseHash: function(hash) {\r\n\t\t\tif(hash.indexOf('#') == 0) {\r\n\t\t\t\thash = hash.substr(1);\r\n\t\t\t}\r\n\t\t\tvar args = hash.split(\"/\");\r\n\t\t\tif (args.length == 3) {\r\n\t\t\t\tvar zoom = parseInt(args[0], 10),\r\n\t\t\t\t\tlat = parseFloat(args[1]),\r\n\t\t\t\t\tlon = parseFloat(args[2]);\r\n\t\t\t\tif (isNaN(zoom) || isNaN(lat) || isNaN(lon)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcenter: new L.LatLng(lat, lon),\r\n\t\t\t\t\t\tzoom: zoom\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tformatHash: function(map) {\r\n\t\t\tvar center = map.getCenter(),\r\n\t\t\t\tzoom = map.getZoom(),\r\n\t\t\t\tprecision = Math.max(0, Math.ceil(Math.log(zoom) / Math.LN2));\r\n\t\t\t\r\n\t\t\treturn \"#\" + [zoom,\r\n\t\t\t\tcenter.lat.toFixed(precision),\r\n\t\t\t\tcenter.lng.toFixed(precision)\r\n\t\t\t].join(\"/\");\r\n\t\t},\r\n\t\r\n\t\tinit: function(map) {\r\n\t\t\tthis.map = map;\r\n\t\t\t\r\n\t\t\tthis.map.on(\"moveend\", this.onMapMove, this);\r\n\t\t\t\r\n\t\t\t// reset the hash\r\n\t\t\tthis.lastHash = null;\r\n\t\t\tthis.onHashChange();\r\n\t\r\n\t\t\tif (!this.isListening) {\r\n\t\t\t\tthis.startListening();\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tremove: function() {\r\n\t\t\tthis.map = null;\r\n\t\t\tif (this.isListening) {\r\n\t\t\t\tthis.stopListening();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tonMapMove: function(map) {\r\n\t\t\t// bail if we're moving the map (updating from a hash),\r\n\t\t\t// or if the map has no zoom set\r\n\t\t\t\r\n\t\t\tif (this.movingMap || this.map.getZoom() === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar hash = this.formatHash(this.map);\r\n\t\t\tif (this.lastHash != hash) {\r\n\t\t\t\tlocation.replace(hash);\r\n\t\t\t\tthis.lastHash = hash;\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tmovingMap: false,\r\n\t\tupdate: function() {\r\n\t\t\tvar hash = location.hash;\r\n\t\t\tif (hash === this.lastHash) {\r\n\t\t\t\t// console.info(\"(no change)\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar parsed = this.parseHash(hash);\r\n\t\t\tif (parsed) {\r\n\t\t\t\t// console.log(\"parsed:\", parsed.zoom, parsed.center.toString());\r\n\t\t\t\tthis.movingMap = true;\r\n\t\t\t\t\r\n\t\t\t\tthis.map.setView(parsed.center, parsed.zoom);\r\n\t\t\t\t\r\n\t\t\t\tthis.movingMap = false;\r\n\t\t\t} else {\r\n\t\t\t\t// console.warn(\"parse error; resetting:\", this.map.getCenter(), this.map.getZoom());\r\n\t\t\t\tthis.onMapMove(this.map);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t// defer hash change updates every 100ms\r\n\t\tchangeDefer: 100,\r\n\t\tchangeTimeout: null,\r\n\t\tonHashChange: function() {\r\n\t\t\t// throttle calls to update() so that they only happen every\r\n\t\t\t// `changeDefer` ms\r\n\t\t\tif (!this.changeTimeout) {\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tthis.changeTimeout = setTimeout(function() {\r\n\t\t\t\t\tthat.update();\r\n\t\t\t\t\tthat.changeTimeout = null;\r\n\t\t\t\t}, this.changeDefer);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tisListening: false,\r\n\t\thashChangeInterval: null,\r\n\t\tstartListening: function() {\r\n\t\t\tif (HAS_HASHCHANGE) {\r\n\t\t\t\tL.DomEvent.addListener(window, \"hashchange\", this.onHashChange);\r\n\t\t\t} else {\r\n\t\t\t\tclearInterval(this.hashChangeInterval);\r\n\t\t\t\tthis.hashChangeInterval = setInterval(this.onHashChange, 50);\r\n\t\t\t}\r\n\t\t\tthis.isListening = true;\r\n\t\t},\r\n\t\r\n\t\tstopListening: function() {\r\n\t\t\tif (HAS_HASHCHANGE) {\r\n\t\t\t\tL.DomEvent.removeListener(window, \"hashchange\", this.onHashChange);\r\n\t\t\t} else {\r\n\t\t\t\tclearInterval(this.hashChangeInterval);\r\n\t\t\t}\r\n\t\t\tthis.isListening = false;\r\n\t\t}\r\n\t};\r\n\tL.hash = function(map){\r\n\t\treturn new L.Hash(map);\r\n\t};\r\n\tL.Map.prototype.hash = function(){\r\n\t\tL.hash(this);\r\n\t\treturn this;\r\n\t};\r\n})(window);"]],"start1":0,"start2":0,"length1":0,"length2":3595}]],"length":3595,"saved":false}
